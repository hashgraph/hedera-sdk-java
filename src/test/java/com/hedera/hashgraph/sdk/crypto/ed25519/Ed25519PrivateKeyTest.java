package com.hedera.hashgraph.sdk.crypto.ed25519;

import com.hedera.hashgraph.sdk.crypto.Mnemonic;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

class Ed25519PrivateKeyTest {

    private static final String testKeyStr = "302e020100300506032b657004220420db484b828e64b2d8f12ce3c0a0e93a0b8cce7af1bb8f39c97732394482538e10";
    private static final String testKeyPem = "-----BEGIN PRIVATE KEY-----\n"
        + "MC4CAQAwBQYDK2VwBCIEINtIS4KOZLLY8SzjwKDpOguMznrxu485yXcyOUSCU44Q\n"
        + "-----END PRIVATE KEY-----\n";

    // generated by hedera-sdk-js, not used anywhere
    private static final String mnemonicString = "inmate flip alley wear offer often piece magnet surge toddler submit right radio absent pear floor belt raven price stove replace reduce plate home";
    private static final String mnemonicPrivateKey = "302e020100300506032b657004220420853f15aecd22706b105da1d709b4ac05b4906170c2b9c7495dff9af49e1391da";

    // root key generated by the iOS wallet, not used anywhere
    private static final String iosWalletMnemonic ="tiny denial casual grass skull spare awkward indoor ethics dash enough flavor good daughter early hard rug staff capable swallow raise flavor empty angle";

    // private key for "default account", should be index 0
    private static final String iosWalletPrivKey ="5f66a51931e8c99089472e0d70516b6272b94dd772b967f8221e1077f966dbda2b60cf7ee8cf10ecd5a076bffad9a7c7b97df370ad758c0f1dd4ef738e04ceb6";

    @Test
    @DisplayName("private key generates successfully")
    void keyGenerates() {
        final Ed25519PrivateKey key = Ed25519PrivateKey.generate();

        assertNotNull(key);
        assertNotNull(key.toBytes());
    }

    @Test
    @DisplayName("private key can be recovered from bytes")
    void keySerialization() {
        final Ed25519PrivateKey key1 = Ed25519PrivateKey.generate();
        final byte[] key1Bytes = key1.toBytes();
        final Ed25519PrivateKey key2 = Ed25519PrivateKey.fromBytes(key1Bytes);
        final byte[] key2Bytes = key2.toBytes();

        assertArrayEquals(key1Bytes, key2Bytes);
    }

    @ParameterizedTest
    @DisplayName("private key can be recovered from external string")
    @ValueSource(strings = {
        "302e020100300506032b657004220420db484b828e64b2d8f12ce3c0a0e93a0b8cce7af1bb8f39c97732394482538e10",
        // raw hex (concatenated private + public key)
        "db484b828e64b2d8f12ce3c0a0e93a0b8cce7af1bb8f39c97732394482538e10" +
            "e0c8ec2758a5879ffac226a13c0c516b799e72e35141a0dd828f94d37988a4b7",
        // raw hex (just private key)
        "db484b828e64b2d8f12ce3c0a0e93a0b8cce7af1bb8f39c97732394482538e10"
    })
    void externalKeyDeserialize(String keyStr) {
        final Ed25519PrivateKey key = Ed25519PrivateKey.fromString(keyStr);
        assertNotNull(key);
        // the above are all the same key
        assertEquals(
            testKeyStr,
            key.toString()
        );
    }

    @Test
    @DisplayName("private key can be encoded to a string")
    void keyToString() {
        final Ed25519PrivateKey key = Ed25519PrivateKey.fromString(testKeyStr);

        assertNotNull(key);
        assertEquals(testKeyStr, key.toString());
    }

    @Test
    @DisplayName("private key can be decoded from a PEM file")
    void keyFromPem() throws IOException {
        final StringReader stringReader = new StringReader(testKeyPem);
        final Ed25519PrivateKey privateKey = Ed25519PrivateKey.fromPemFile(stringReader);

        assertEquals(privateKey.toString(), testKeyStr);
    }

    @Test
    @DisplayName("private key can be decoded from a PEM file")
    void keyToPem() throws IOException {
        final StringWriter stringWriter = new StringWriter();
        final Ed25519PrivateKey privateKey = Ed25519PrivateKey.fromString(testKeyStr);
        privateKey.writePem(stringWriter);

        assertEquals(stringWriter.toString(), testKeyPem);
    }

    @Test
    @DisplayName("private key can be recovered from a mnemonic")
    void keyFromMnemonic() {
        final Mnemonic mnemonic = Mnemonic.fromString(mnemonicString);
        final Ed25519PrivateKey key = Ed25519PrivateKey.fromMnemonic(mnemonic);
        final Ed25519PrivateKey key2 = Ed25519PrivateKey.fromString(mnemonicPrivateKey);
        assertArrayEquals(key2.toBytes(), key.toBytes());
    }
}
