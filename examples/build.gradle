dependencies {
    implementation project(":sdk")

    implementation "com.google.code.gson:gson:2.10.1"
    implementation "org.slf4j:slf4j-simple:2.0.9"
    implementation "io.grpc:grpc-netty-shaded:1.57.2"
    implementation "io.github.cdimascio:java-dotenv:5.3.1"
    implementation "com.google.errorprone:error_prone_core:2.24.0"
}

task runAllExamples {
    def exampleClasses = fileTree('src/main/java')
        .toList()
        .stream()
        .filter { it.name.endsWith('Example.java') }
        .map { it.name.replaceAll('\\.java$', '') }
        .filter { !it.equals('ValidateChecksumExample') } // disabled this example, because it needs user input (but it WORKS)
        .filter { !it.equals('ZeroTokenOperationsExample') } // doesn't work
        .filter { !it.equals('SolidityPrecompileExample') } // doesn't work with hedera-local-node
        .filter { !it.equals('ConsensusPubSubChunkedExample') } // doesn't work on CI
        .toList()

    exampleClasses.each { className ->
        def multilineString = """

        ---EXECUTING $className:

        """

        doLast {
            javaexec {
                println multilineString

                classpath = sourceSets.main.runtimeClasspath
                main = className
                standardInput(System.in)

                // NOTE: Uncomment to enable trace logs in the SDK during the examples
                // jvmArgs "-Dorg.slf4j.simpleLogger.log.com.hedera.hashgraph=trace"
            }
        }
    }

}

tasks.addRule("Pattern: run<Example>: Runs an example.") { String taskName ->
    if (taskName.startsWith("run")) {
        task(taskName, type: JavaExec) {
            classpath = sourceSets.main.runtimeClasspath
            main = (taskName - "run") + "Example"
            standardInput(System.in)

            // NOTE: Uncomment to enable trace logs in the SDK during the examples
            // jvmArgs "-Dorg.slf4j.simpleLogger.log.com.hedera.hashgraph=trace"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone {
        disable("DefaultPackage")
        disable("SystemOut")
    }
}
