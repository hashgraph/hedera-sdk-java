syntax = "proto3";

package proto;

/*
 * Hedera Network Services Protobuf
 *
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.hedera.hashgraph.sdk.proto";
// <<<pbj.java_package = "com.hedera.hapi.node.addressbook">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "basic_types.proto";
import "query_header.proto";
import "response_header.proto";

/**
 * Gets information about Node instance. This needs super use privileges to succeed or should be a node operator.
 */
message NodeGetInfoQuery {
    /**
     * Standard information sent with every query operation.<br/>
     * This includes the signed payment and what kind of response is requested
     * (cost, state proof, both, or neither).
     */
    QueryHeader header = 1;

    /**
     * A node identifier for which information is requested.<br/>
     * If the identified node is not valid, this request SHALL fail with
     * a response code `INVALID_NODE_ID`.
     */
    uint64 node_id = 2;
}

/**
 * A query response describing the current state of a node
 */
message NodeInfo {
    /**
     * A numeric node identifier.<br/>
     * This value identifies this node within the network address book.
     */
    uint64 node_id = 1;

    /**
     * The account is charged for transactions submitted by the node that fail due diligence
     */
    AccountID account_id = 2;

    /**
     * A description of the node with UTF-8 encoding up to 100 bytes
     */
    string description = 3;

    /**
     * A node's Gossip Endpoints, ip address and port
     */
    repeated ServiceEndpoint gossip_endpoint = 4;

    /**
     * A node's service Endpoints, ip address or FQDN and port
     */
    repeated ServiceEndpoint service_endpoint = 5;

    /**
     * The node's X509 certificate used to sign stream files (e.g., record stream
     * files). Precisely, this field is the DER encoding of gossip X509 certificate.
     * files).
     */
    bytes gossip_ca_certificate = 6;

    /**
     * node x509 certificate hash. Hash of the node's TLS certificate. Precisely, this field is a string of
     * hexadecimal characters which, translated to binary, are the SHA-384 hash of
     * the UTF-8 NFKD encoding of the node's TLS cert in PEM format. Its value can be
     * used to verify the node's certificate it presents during TLS negotiations.
     */
    bytes grpc_certificate_hash = 7;

    /**
     * The consensus weight of this node in the network.
     */
    uint64 weight = 8;

    /**
     * Whether the node has been deleted
     */
    bool deleted = 10;

    /**
     * A ledger ID.<br/>
     * This identifies the network that responded to this query.
     * The specific values are documented in [HIP-198]
     * (https://hips.hedera.com/hip/hip-198).
     */
    bytes ledger_id = 9;
}

/**
 * Response when the client sends the node NodeGetInfoQuery
 */
message NodeGetInfoResponse {
    /**
     * The standard response information for queries.<br/>
     * This includes the values requested in the `QueryHeader`;
     * cost, state proof, both, or neither.
     */
    ResponseHeader header = 1;

    /**
     * The information requested about this node instance
     */
    NodeInfo nodeInfo = 2;
}
