syntax = "proto3";

package proto;

/*-
 * ‌
 * Hedera Network Services Protobuf
 * ​
 * Copyright (C) 2018 - 2021 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

option java_package = "com.hedera.hashgraph.sdk.proto";
option java_multiple_files = true;

import "BasicTypes.proto";
import "Timestamp.proto";
import "QueryHeader.proto";
import "ResponseHeader.proto";
import "ScheduleCreate.proto";

/*
Gets information about Scheduled Transaction instance

Answered with status INVALID_SCHEDULE_ID if the Scheduled Transaction is deleted, expires or is executed.
 */
message ScheduleGetInfoQuery {
  QueryHeader header = 1; // standard info sent from client to node including the signed payment, and what kind of response is requested (cost, state proof, both, or neither).
  ScheduleID scheduleID = 2; // The ID of the Scheduled Entity
}

/*
Metadata about a Scheduled Transaction instance
 */
message ScheduleInfo {
  ScheduleID scheduleID = 1; // The ID of the Scheduled Entity
  AccountID creatorAccountID = 2; // The Account ID which created the Scheduled TX
  AccountID payerAccountID = 3; // The account which is going to pay for the execution of the Scheduled TX
  bytes transactionBody = 4; // The transaction serialized into bytes that must be signed
  KeyList signatories = 5; // The signatories that have provided signatures so far for the Scheduled TX
  Key adminKey = 6; // The Key which is able to delete the Scheduled Transaction if set
  string memo = 7; // Publicly visible information about the Scheduled entity, up to 100 bytes. No guarantee of uniqueness.
  Timestamp expirationTime = 8; // The epoch second at which the schedule will expire
  TransactionID scheduledTransactionID = 9; // TransactionID that should be used to query for the receipt or record of the scheduled transaction
}

/*
Response that gets returned, when the client sends the node a ScheduleGetInfoQuery
*/
message ScheduleGetInfoResponse {
  ResponseHeader header = 1; // Standard response from node to client, including the requested fields: cost, or state proof, or both, or neither
  ScheduleInfo scheduleInfo = 2; // The information requested about this schedule instance
}
