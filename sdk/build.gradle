plugins {
    id "java-library"
    id "idea"
    id "signing"
    id "maven-publish"
    id "com.google.protobuf" version "0.9.3"
    id "com.github.spotbugs" version "5.0.14"
}

apply from: "../version.gradle"
apply from: "./sdk.gradle"

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task sourcesJar(type: Jar) {
    dependsOn("assemble")
    duplicatesStrategy "exclude"
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

dependencies {
    // https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs-annotations
    implementation group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.7.3'

    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15to18
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15to18', version: '1.73'

    // https://mvnrepository.com/artifact/org.bouncycastle/bcpkix-jdk15to18
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15to18', version: '1.73'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:2.0.7'

    implementation "io.grpc:grpc-core:1.55.1"
    implementation "io.grpc:grpc-stub:1.55.1"

    implementation "com.google.code.gson:gson:2.10.1"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation "com.esaulpaugh:headlong:9.2.0"

    testImplementation "org.assertj:assertj-core:3.24.2"
    testImplementation "io.github.json-snapshot:json-snapshot:1.0.17"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.9.3"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.9.3"

    testRuntimeOnly "org.slf4j:slf4j-simple:2.0.7"
    testRuntimeOnly "io.grpc:grpc-netty-shaded:1.56.0"
    testRuntimeOnly 'org.slf4j:slf4j-nop:2.0.7'

    integrationTestRuntimeOnly 'io.grpc:grpc-netty-shaded:1.56.0'
    integrationTestRuntimeOnly 'org.slf4j:slf4j-nop:2.0.7'
}

// https://github.com/google/protobuf-gradle-plugin
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.23.2"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.55.1"
        }
    }
}

spotbugs {
    //ignoreFailures = false
    //showStackTraces = true
    //showProgress = false
    //reportLevel = 'default'
    //effort = 'default'
    //visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
    //omitVisitors = [ 'FindNonShortCircuit' ]
    reportsDir = file("$buildDir/reports/spotbugs")
    //includeFilter = file('spotbugs-include.xml')
    //excludeFilter = file('spotbugs-exclude.xml')
    onlyAnalyze = ['com.hedera.hashgraph.sdk.*']
    //projectName = name
    //release = version
    //extraArgs = [ '-nested:false' ]
    //jvmArgs = [ '-Duser.language=ja' ]
    //maxHeapSize = '512m'
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'build/generated/source/proto/main/grpc'
        }
    }
    integrationTest {
        java.srcDir "$projectDir/src/integrationTest/java"

        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

idea {
    module {
        sourceDirs -= file("src/integrationTest/java")
        testSourceDirs += file("src/integrationTest/java")
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    onlyIf {
        System.getenv('OPERATOR_ID') != null && System.getenv('OPERATOR_KEY') != null || System.getenv('CONFIG_FILE') != null
    }
}

jacocoTestReport {
    // make sure to use any/all test coverage data for the report
    executionData fileTree(dir: buildDir, include: "jacoco/*.exec")

    // remove generated proto files from report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/proto/**',
                '**/AccountAllowanceAdjustTransaction.*',
                '**/HederaPreCheckStatusException.*',
                '**/HederaReceiptStatusException.*'
            ])
        }))
    }

    // configure it so only xml is generated for the report
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    // make sure we run all tests before this report is made
    dependsOn test, integrationTest
}

tasks.withType(Javadoc) {
    source = sourceSets.main.allJava + file("$buildDir/generated/sources/annotationProcessor/java/main")
}

tasks.withType(Test) {
    useJUnitPlatform()

    // NOTE: Uncomment to enable trace logs in the SDK during tests
    // jvmArgs "-Dorg.slf4j.simpleLogger.log.com.hedera.hashgraph=trace"

    // this task will fail on the first failed test
    failFast = true

    // emit logs per passed or failed test
    testLogging {
        exceptionFormat = 'full'
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }

    // propagate system environment to test runner
    systemProperty "OPERATOR_ID", findProperty("OPERATOR_ID")
    systemProperty "OPERATOR_KEY", findProperty("OPERATOR_KEY")
    systemProperty "CONFIG_FILE", findProperty("CONFIG_FILE")
    systemProperty "HEDERA_NETWORK", findProperty("HEDERA_NETWORK")
}

jar {
    exclude "**/*.proto"
    includeEmptyDirs = false
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = "Hedera SDK"
                description = "Hederaâ„¢ Hashgraph SDK for Java"
                url = 'https://github.com/hashgraph/hedera-sdk-java'

                organization {
                    name = "Hedera Hashgraph"
                    url = "https://www.hedera.com"
                }

                issueManagement {
                    system = "GitHub"
                    url = "https://github.com/hashgraph/hedera-sdk-java/issues"
                }

                licenses {
                    license {
                        name = "Apache License, Version 2.0"
                        url = "https://github.com/hashgraph/hedera-sdk-java/blob/main/LICENSE"
                        distribution = "repo"
                    }
                }

                scm {
                    url = "https://github.com/hashgraph/hedera-sdk-java"
                    connection = "scm:git:https://github.com/hashgraph/hedera-sdk-java.git"
                    developerConnection = "scm:git:ssh://github.com:hashgraph/hedera-sdk-java.git"
                }

                developers {
                    developer {
                        name = "Ryan Leckey"
                    }

                    developer {
                        name = "Daniel Akhterov"
                    }
                }
            }

            from(components.java)
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
